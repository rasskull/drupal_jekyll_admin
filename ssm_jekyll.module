<?php
// DRUPAL HOOKS
/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/

// CONSTANTS
define('FOLDER', '/Users/jgroh/Sites/superstar_sites/jekyll/_posts/');

function ssm_jekyll_help($section='') {

  $output = '';

  switch ($section) {
    case "admin/help#ssm_jekyll":
      $output = '<p>'.  t("SuperStar Jekyll Admin Tools"). '</p>';
      break;
  }

  return $output;
} 


/**
* Valid permissions for this module
* @return array An array of valid permissions for the module
*/
function ssm_jekyll_perm() {
  return array('administer ssm jekyll admin', 'manage ssm jekyll posts');
} 


/**
 * Implementation of hook_menu().
 */
function ssm_jekyll_menu() {

    $items = array();
    $items["admin/posts"] = array(
      'title' => t('Superstar Media Admin Tools'),
		  'page callback' => 'ssm_jekyll_post_list', 
		  'description' => t('Superstar Media tools for site updating'),
      'access arguments' => array('manage ssm jekyll posts'),
    );
    $items["admin/post/edit"] = array(
      'title' => t('Edit Post'),
      'page callback' => 'ssm_jekyll_post_edit', 
      'description' => t('Superstar Media tools for site updating'),
      'access arguments' => array('manage ssm jekyll posts'),
    );
    return $items;
}


/**
 * Displays Jekyll posts
 */
function ssm_jekyll_post_list() {

  $list = _ssm_jekyll_read_posts(arg(2));
  
  // format data according to type
  switch(arg(2)) {
    case 'tour': $table = _ssm_jekyll_list_posts_tour($list);
    break;
    default: $table = _ssm_jekyll_list_posts($list);
  }

  return $table;
}


/**
 * Edits Jekyll posts
 */
function ssm_jekyll_post_edit() {
  return drupal_get_form('ssm_jekyll_post_edit_form');
}


function ssm_jekyll_post_edit_form() {
  $file = arg(4) . '.markdown';
  $path = FOLDER . $file;
  $data = file_get_contents($path);
  $data_parts = explode('---', $data);
  if(count($data_parts)>2 && trim($data_parts[1])) {
    
    // read yaml
    $fields = _ssm_jekyll_read_yaml($data_parts[1]);

    foreach ($fields as $key => $field) {
      // hide certain fields
      $hide = array('layout','categories');
      if(in_array($key, $hide)) continue;
      $form[$key] = array(
      '#type' => 'textfield',
      '#title' => ucfirst($key),
      '#default_value' => $field,
      );

    }

    // get date from file name
    $date = _ssm_jekyll_read_post_date($file);
    $fields['timestamp'] = $date;
    $fields['date'] = date('m/d/Y', $date);
    $fields['filename'] = $file;
    
    $form['body'] = array(
      '#type' => 'textarea',
      '#title' => 'Body',
      '#default_value' => $data_parts[2],
    );
    
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Update Post'),
  );
  return $form;
  
}

function ssm_jekyll_post_edit_form_submit($form_id, $form_values) {
  /*
  variable_set('ssm_jekyll_svn_update_site_path', $form_values['values']['ssm_jekyll_svn_update_site_path']);
  variable_set('ssm_jekyll_svn_update_repo', $form_values['values']['ssm_jekyll_svn_update_repo']);
  variable_set('ssm_jekyll_svn_update_branch', $form_values['values']['ssm_jekyll_svn_update_branch']);

  if(variable_get('ssm_jekyll_svn_update_site_path', '')) {
 
    $output = array(); 
    $error_code = 0;
    $path = variable_get('ssm_jekyll_svn_update_site_path', '');
    $repo = variable_get('ssm_jekyll_svn_update_repo', 'origin');
    $branch = variable_get('ssm_jekyll_svn_update_branch', 'master');
    // build command
    $cmd = 'cd '.$path.'; sudo -H -u root git pull '.$repo.' '.$branch.' 2>&1';
  
    exec($cmd, $output, $error_code); 

    if ($error_code) { 
      echo "Error $error_code occurred<br />\n"; 
    } 
  
    $message = 'Updated/Set ' . nl2br(htmlspecialchars(implode("\n", $output))) . "\n"; 
  
  } else {
    $message = 'Site path not set!';
  }
  
  drupal_set_message(t($message));
  */
}


/*
 * Helper function to read and return posts data
 */
function _ssm_jekyll_read_posts($category) {
  // todo: put paths into entity fields?
  
  $list = array();
  if ($handle = opendir(FOLDER)) {
    while (false !== ($entry = readdir($handle))) {
      
      $data = file_get_contents(FOLDER . $entry);
      $data_parts = explode('---', $data);
      if(count($data_parts)>2 && trim($data_parts[1]) && strlen($entry)>0) {
        
        // read yaml
        $fields = _ssm_jekyll_read_yaml($data_parts[1]);
        
        // only load requested category
        if($fields['categories']=="[$category]") {
          // get date from file name
          $date = _ssm_jekyll_read_post_date($entry);
          $fields['timestamp'] = $date;
          $fields['date'] = date('m/d/Y', $date);
          $fields['filename'] = $entry;
          $list[] = $fields;

        } else {
          // if not the selected category, unset the $fields array
          unset($fields);
        }
      }
    }
    // close folder reading
    closedir($handle);

    // sort data by timestamp
    usort($list, "_ssm_jekyll_post_date_sort_asc");

    return $list;

  }
}


/*
 * Helper function to read yalm front matter
 */
function _ssm_jekyll_read_yaml($raw_yaml) {
   // to do: site will store category info that can tie into the fields such as ordering, description, etc... 
  $lines = explode("\n", $raw_yaml);
  $fields = array();
  foreach ($lines as $line) {
    if(!strlen($line)) continue;
    $field = explode(':', $line, 2);
    if(count($field)>0) {
      $fields[trim($field[0])] = trim($field[1]);
    }
  }
  return $fields;
}


/*
 * Helper function to read post date from file name
 */
function _ssm_jekyll_read_post_date($filename) {
  $dates = explode('-', $filename, 4);
  return strtotime($dates[0] . '-' . $dates[1] . '-' . $dates[2]);
}


/*
 * Helper function to sort data array
 */
function _ssm_jekyll_post_date_sort_desc($a, $b) {
  if ($a['timestamp'] == $b['timestamp']) {
    return 0;
  }
  return ($a['timestamp'] < $b['timestamp']) ? -1 : 1;
}


/*
 * Helper function to sort data array
 */
function _ssm_jekyll_post_date_sort_asc($a, $b) {
  if ($a['timestamp'] == $b['timestamp']) {
    return 0;
  }
  return ($a['timestamp'] > $b['timestamp']) ? -1 : 1;
}


/*
 * Helper function to build post edit links
 */
function _ssm_jekyll_post_edit_link($filename) {
  // remove .markdown from filename
  $name = substr($filename, 0, -9);
  // add destination
  $qs['destination'] = 'admin/posts/'.arg(2); 
  return url('admin/post/edit/'.arg(2) .'/' . $name, array('query' => $qs));
}


/*
 * Helper function to format general posts like news, blog, etc...
 */
function _ssm_jekyll_list_posts($list) {
  $table = '<table>
  <tr>
    <th>Date</th>
    <th>Title</th>
    <th>Edit</th>
  </tr>';

  foreach ($list as $row) {
    $table .= "<tr>
      <td>$row[date]</td>
      <td>$row[title]</td>
      <td><a href='"._ssm_jekyll_post_edit_link($row['filename'])."'>edit</a></td>
    </tr>";
  }
  $table .= '</table>';
  return $table;
}


/*
 * Helper function to format tour items
 */
function _ssm_jekyll_list_posts_tour($list) {
  $table = '<table>
  <tr>
    <th>Tour Date</th>
    <th>Location</th>
    <th>Venue</th>
    <th>Edit</th>
  </tr>';

  foreach ($list as $row) {
    $table .= "<tr>
      <td>$row[date]</td>
      <td>$row[location]</td>
      <td>$row[venue]</td>
      <td><a href='"._ssm_jekyll_post_edit_link($row['filename'])."'>edit</a></td>
    </tr>";
  }
  $table .= '</table>';
  return $table;
}


/**
 * Implementation of hook_preprocess_page().
 */
function ssm_jekyll_preprocess_page($vars) {
  if(arg(1) == 'posts' && arg(2)){
    drupal_set_title(ucfirst(arg(2)) . ' Admin');
  }
}

// no ending php tag!
